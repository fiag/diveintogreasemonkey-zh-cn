<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
	This work is licensed under a Creative Commons License.

	You are free:

	to copy, distribute, display, and perform the work
	to make derivative works
	to make commercial use of the work

	Under the following conditions:

	Attribution. You must give the original author credit

	Author:  Dean Edwards/2004
	Web:     http://dean.edwards.name/

	License: http://creativecommons.org/licenses/by/2.0/
-->

<!-- keeping code tidy!! -->

<!-- a javascript syntax highlighter -->

<!-- version 1.1b (2005/01/06) -->

<public:component xmlns:public="urn:HTMLComponent" lightweight="true">
<public:attach event="oncontentready" handler="parse"/>
<script type="text/javascript">
//<![CDATA[
// constants
var RGB_COMMENT  = "#f00";//"#080";
var RGB_STRING   = "#800";
var RGB_NUMBER   = "#800";
var RGB_KEYWORD  = "#00f";
var RGB_LANGUAGE = "#0a0";//"#488";
var RGB_SPECIAL  = "#00f";
var FOOTER = "";
var PLACEHOLDER = "@";
var KEYWORDS = "arguments|break|case|continue|default|delete|do|else|false|for|function|if|"+
               "in|new|null|return|switch|this|true|typeof|var|void|while|with";
var GLOBAL = "toString|valueOf|toSource|window|element|prototype|constructor|"+
             "escape|unescape|parseInt|parseFloat|setTimeout|clearTimeout|setInterval|clearInterval";
var SPECIAL = "alert|__defineGetter__|__defineSetter__|try|catch|finally";
var NUMBERS = "[.\\d]+";

var patterns = []; // temporary store for patterns
// fix Array.push for IE5.0
if (!patterns.push) patterns.push = function($item) {
	this[this.length] = $item;
	return this.length;
};
var $COMMENTS_STRINGS_REGEXPS = /(\/\*[^\*]*\*+([^\/][^\*]*\*+)*\/)|(\/\/[^\n]*\n)|(\'[^\'\n]*\')|(\"[^\"\n]*\")|(\/[^\/\n]+\/)/g;

function parse() {
	var text = getText();
	text = parseSpecial(parseGlobal(parseKeywords(parseNumbers(parsePatterns(text)))));
	for (var i = patterns.length; i > 0; i--) text = text.replace(PLACEHOLDER + i + PLACEHOLDER, patterns[i - 1]);
	// put placeholder back
	text = text.replace(new RegExp("\\\\x" + PLACEHOLDER.toString(16), "g"), PLACEHOLDER);
	// write the newly formatted script
	innerHTML = text;
};

function getText() {
	if (/^ms/.test(element.uniqueID)) {
		var text = innerHTML;
	} else {
		var text = "";
		for (var i = 0; i < childNodes.length; i++) {
			if (childNodes[i].nodeType == 3) text += childNodes[i].nodeValue;
		}
		text = text.replace(/</g, "&lt;");
	}
	return tidy(text + FOOTER);
};

function parsePatterns(text) {
	// strip out comments, regular expressions and strings
	return text.replace($COMMENTS_STRINGS_REGEXPS, function ($match) {
		return PLACEHOLDER + patterns.push(($match.charAt(0) == "/") ?
			($match.charAt(1) == "/" || $match.charAt(1) == "*") ?
				wrap($match, RGB_COMMENT) : $match : wrap($match, RGB_STRING)) + PLACEHOLDER;
	});
};

function parseKeywords(text) {
	return parseWords(text, KEYWORDS, RGB_KEYWORD);
};

function parseSpecial(text) {
	return parseWords(text, SPECIAL, RGB_SPECIAL);
};

function parseGlobal(text) {
	return parseWords(text, GLOBAL, RGB_LANGUAGE);
};

function parseNumbers(text) {
	//return text;
	return text.replace(new RegExp("([^" + PLACEHOLDER + "\\w.])([\\d.]+)\\b", "g"), function ($match, prefix, number) {
		return prefix + wrap(number, RGB_NUMBER);
	});
};

function parseWords(text, words, color) {
	return text.replace(new RegExp("(\\b)(" + words + ")(\\b)", "g"), function ($match, left, match, right) {
		return left + wrap(match, color) + right;
	});
};

function wrap(text, color) {
	return "<span style=\"color:" + color + "\">" + text + "</span>";
};

function tidy(text) {
	text = text.replace(/\t/g, "&nbsp;&nbsp;&nbsp;&nbsp;").replace(/ /g, "&nbsp;");
	// a bit of browser-sniffing, tut tut
	if (/^ms/.test(element.uniqueID)) text = text.replace(/\r\n/g, "&nbsp;<br>\n");
	// escape out the placeholder used for parsing
	return text.replace(new RegExp(PLACEHOLDER, "g"), "\\x" + PLACEHOLDER.toString(16));
};

// fix String.replace for IE5.0
if("i".replace(/i/,function(){return""})){var a=String.prototype.replace,b=function(r,w){var m,n="",s=this;
while((m=r.exec(s))){n+=s.slice(0,m.index)+w(m[0],m[1],m[2],m[3],m[4]);s=s.slice(m.lastIndex)}return n+s};
String.prototype.replace=function(r,w){this.replace=(typeof w=="function")?b:a;return this.replace(r,w)}}

//]]>
</script>
</public:component>
<!-- http://dean.edwards.name/ -->
